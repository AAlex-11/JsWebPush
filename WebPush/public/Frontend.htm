<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Push API Example</title>
</head>
<body>
<h1>Push API Example</h1>
<button id="subscribe-btn">Subscribe to Push Notifications</button>

<div id="notification" style="display: none; position: fixed; bottom: 20px; right: 20px; padding: 10px; background: #333; color: #fff; border-radius: 5px;">
    <p id="notification-message"></p>
    <button id="close-notification">Close</button>
</div>

<script>
    const publicVapidKey = 'BJWeyHa-92g1zmHs0Tt0CoWTtSFEUntkGHYt4AHm838HWEOBM30R5sgr7X3ODonL0eTnuZJzHPqq5L7rbOF4A9g'; // Replace with your VAPID public key

    // Function to show a custom in-app notification
    function showNotification(message) {
        const notification = document.getElementById('notification');
        const messageElement = document.getElementById('notification-message');
        messageElement.textContent = message;
        notification.style.display = 'block';
    }

    // Function to close the notification
    function closeNotification() {
        const notification = document.getElementById('notification');
        notification.style.display = 'none';
    }

    // Close notification when the button is clicked
    document.getElementById('close-notification').addEventListener('click', closeNotification);

    // Subscribe to push notifications
    async function subscribeToPush() {
        if ('serviceWorker' in navigator && 'PushManager' in window) {
            try {
                // Register the service worker
                const registration = await navigator.serviceWorker.register('/sw.js');
                console.log('Service Worker registered:', registration);

                // Request permission for notifications
                const permission = await Notification.requestPermission();
                if (permission === 'granted') {
                    console.log('Notification permission granted.');

                    // Subscribe to push notifications
                    const subscription = await registration.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: urlBase64ToUint8Array(publicVapidKey)
                    });
                    console.log('Push subscription successful:', subscription);

                    // Send the subscription object to the server
                    await fetch('/subscribe', {
                        method: 'POST',
                        body: JSON.stringify(subscription),
                        headers: { 'Content-Type': 'application/json' }
                    });

                    alert('Subscribed to push notifications!');
                } else {
                    console.error('Notification permission denied.');
                }
            } catch (error) {
                console.error('Error during push subscription:', error);
            }
        } else {
            console.error('Push API not supported.');
        }
    }

    // Convert VAPID public key to Uint8Array
    function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - (base64String.length % 4)) % 4);
        const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
        const rawData = atob(base64);
        return Uint8Array.from([...rawData].map(char => char.charCodeAt(0)));
    }

    // Event listener for the subscribe button
    document.getElementById('subscribe-btn').addEventListener('click', subscribeToPush);

    // Listen for messages from the Service Worker
    navigator.serviceWorker.onmessage = (event) => {
        if (event.data.type === 'show-notification') {
            showNotification(event.data.body);
        }
    };
</script>
</body>
</html>